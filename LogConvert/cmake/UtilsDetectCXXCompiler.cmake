# Detect Microsoft compiler
if( CMAKE_CL_64 )
    set( MSVC64 1 )
endif()

# Detect Microsoft compiler
if( CMAKE_CXX_COMPILER_ID STREQUAL "Clang" )
  set(CMAKE_COMPILER_IS_GNUCXX 1)
  set(CMAKE_COMPILER_IS_CLANGCXX 1)
endif()
if( CMAKE_C_COMPILER_ID STREQUAL "Clang" )
  set( CMAKE_COMPILER_IS_GNUCC 1 )
  set( CMAKE_COMPILER_IS_CLANGCC 1 )
endif()

# Set the MS Windows version (e.g. Win7)
if(WIN32)
    add_definitions( -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 )
endif(WIN32)

if( MSVC )
    # Avoid some MSVC-biased warnings (4307-4244 are boost 'solutions' for warnings)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS -wd4996 -wd4308 -wd4244)
else( MSVC )
	# Detect 64bit MinGW
    if(WIN32)
		execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpmachine
						OUTPUT_VARIABLE CMAKE_OPENCV_GCC_TARGET_MACHINE
						OUTPUT_STRIP_TRAILING_WHITESPACE)
		if(CMAKE_OPENCV_GCC_TARGET_MACHINE MATCHES "amd64|x86_64|AMD64")
			set(MINGW64 1)
		endif()
	endif()
endif( MSVC )

if( MSVC64 OR MINGW64 )
  set( X86_64 1 )
elseif( MINGW OR (MSVC AND NOT CMAKE_CROSSCOMPILING) )
  set( X86 1 )
elseif( CMAKE_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*" )
  set( X86_64 1 )
elseif( CMAKE_SYSTEM_PROCESSOR MATCHES "i686.*|i386.*|x86.*|amd64.*|AMD64.*" )
  set( X86 1 )
elseif( CMAKE_SYSTEM_PROCESSOR MATCHES "arm.*|ARM.*" )
  set( ARM 1 )
endif()

if( MSVC )
  if( CMAKE_CL_64 )
    set( PROJ_ARCH x64)
  else()
    set( PROJ_ARCH x86)
  endif()
  if( MSVC_VERSION EQUAL 1400 )
    set( PROJ_RUNTIME vc8)
  elseif( MSVC_VERSION EQUAL 1500 )
    set( PROJ_RUNTIME vc9 )
  elseif( MSVC_VERSION EQUAL 1600 )
    set( PROJ_RUNTIME vc10)
  elseif( MSVC_VERSION EQUAL 1700 )
    set( PROJ_RUNTIME vc11 )
  endif()
elseif( MINGW )
  set( PROJ_RUNTIME mingw )
  if( MINGW64 )
    set( PROJ_ARCH x64 )
  else()
    set( PROJ_ARCH x86 )
  endif()
endif()

# UNIX standard paths
if( UNIX AND NOT ANDROID )
  if( X86_64 OR CMAKE_SIZEOF_VOID_P EQUAL 8 )
    if( EXISTS /lib64 )
      list( APPEND CMAKE_LIBRARY_PATH /lib64 )
    else()
      list( APPEND CMAKE_LIBRARY_PATH /lib )
    endif()
    if( EXISTS /usr/lib64 )
      list( APPEND CMAKE_LIBRARY_PATH /usr/lib64 )
    else()
      list( APPEND CMAKE_LIBRARY_PATH /usr/lib )
    endif()
  elseif( X86 OR CMAKE_SIZEOF_VOID_P EQUAL 4 )
    if( EXISTS /lib32 )
      list( APPEND CMAKE_LIBRARY_PATH /lib32 )
    else()
      list( APPEND CMAKE_LIBRARY_PATH /lib )
    endif()
    if( EXISTS /usr/lib32 )
      list( APPEND CMAKE_LIBRARY_PATH /usr/lib32 )
    else()
      list( APPEND CMAKE_LIBRARY_PATH /usr/lib )
    endif()
  endif()
endif()

# MinGW specific include path
if( MINGW )
  if( EXISTS /mingw )
      list( APPEND CMAKE_INCLUDE_PATH /mingw )
  endif()
  if( EXISTS /mingw32 )
      list( APPEND CMAKE_INCLUDE_PATH /mingw32 )
  endif()
  if( EXISTS /mingw64 )
      list( APPEND CMAKE_INCLUDE_PATH /mingw64 )
  endif()
endif( MINGW )

